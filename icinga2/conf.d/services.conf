###checks on localhost
apply Service "ping4" {
  import "generic-service"

  check_command = "ping4"

  assign where host.address
}

apply Service "ssh" {
  import "generic-service"

  check_command = "ssh"

  assign where (host.address || host.address6) && host.vars.os == "Linux"
}



apply Service for (http_vhost => config in host.vars.http_vhosts) {
  import "generic-service"

  check_command = "http"

  vars += config
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "disk"

  vars += config
}

apply Service "icinga" {
  import "generic-service"

  check_command = "icinga"

  assign where host.name == NodeName
}

apply Service "load" {
  import "generic-service-notify"
  check_command = "load"
  vars.load_wload1 = 2
  vars.load_wload5 = 2.5
  vars.load_wload15 = 3
  vars.load_cload1 = 3
  vars.load_cload5 = 3.5
  vars.load_cload15 = 4

  assign where host.name == NodeName
}

apply Service "procs" {
  import "generic-service"

  check_command = "procs"
  vars.procs_warning = 300
  vars.procs_critical = 400
  assign where host.name == NodeName
}

apply Service "swap" {
  import "generic-service"

  check_command = "swap"

  assign where host.name == NodeName
}

apply Service "users" {
  import "generic-service"

  check_command = "users"

  assign where host.name == NodeName
}

###CUSTOM CHECKS ON LOCALHOST

apply Service "check_swap" {
  import "generic-service"

  check_command = "check_swap"
  assign where host.name == NodeName

}

apply Service "check_mem_icinga" {
  import "generic-service-f"
  vars.crit = "90"
  vars.warn = "80"
  check_command = "check_mem_local"
  assign where host.name == NodeName
}


apply Service "check_cpu_icinga" {
  import "generic-service"
  check_command = "check_cpu_local"
  vars.crit = "90"
  vars.warn = "75"
  assign where host.name == NodeName
}

apply Service "check_net_icinga" {
  import "generic-service"
  check_command = "check_net_local"
  vars.crit = "10240"
  vars.warn = "1024"
  assign where host.name == NodeName
}

###Remote Checks

#apply Service "nrpe-checkmem" {
#  import "generic-service"
#  vars.check = "check_mem"
#  vars.host = host.address
#  check_command = "nrpe-check-1arg"
#  assign where host.vars.os == "nrpe"
#}

#apply Service "nrpe-checkload" {
#  import "generic-service"
#  vars.check = "check_load"
#  vars.host = host.address
#  check_command = "nrpe-check-1arg"
#  assign where host.vars.os == "nrpe"
#}

#apply Service "nrpe-checkdisk" {
#  import "generic-service"
#  vars.check = "check_diskroot"
#  vars.host = host.address
#  check_command = "nrpe-check-1arg"
#  assign where host.vars.os == "nrpe"
#}

###check by ssh, remote

apply Service "ssh-checkproc" {
  import "generic-service-notify"
  vars.check = "check_procs"
  vars.host = host.address
  vars.crit = host.vars.checkprocs.crit
  vars.warn = host.vars.checkprocs.warn
  check_command = "ssh-check-2arg"
  vars.group = "perfdata"
  assign where host.vars.sshcheck == "1"
}

apply Service "ssh-checkusers" {
  import "generic-service-notify"
  vars.check = "check_users"
  vars.host = host.address
  vars.crit = host.vars.checkusers.crit
  vars.warn = host.vars.checkusers.warn
  check_command = "ssh-check-2arg"
  vars.group = "perfdata"
  assign where host.vars.sshcheck == "1"
}

apply Service "ssh-checkdisk_var" {
  import "generic-service-notify"
  vars.check = "check_disk /var"
  vars.host = host.address
  vars.crit = host.vars.checkdiskvar.crit
  vars.warn = host.vars.checkdiskvar.warn
  check_command = "ssh-check-2arg"
  assign where host.vars.sshcheck == "1"
}

apply Service "ssh-checkdisk_tmp" {
import "generic-service"
vars.check = "check_disk /tmp"
vars.host = host.address
vars.crit = host.vars.checkdisktmp.crit
vars.warn = host.vars.checkdisktmp.warn
check_command = "ssh-check-2arg"
assign where host.vars.sshcheck == "1"
}

apply Service "ssh-checkdisk_root" {
import "generic-service-notify"
vars.check = "check_disk /"
vars.host = host.address
vars.crit = host.vars.checkdiskroot.crit
vars.warn = host.vars.checkdiskroot.warn
check_command = "ssh-check-2arg"
assign where host.vars.sshcheck == "1"
}

apply Service "ssh-checkload" {
import "generic-service-notify"
vars.check = "check_load"
vars.host = host.address
vars.crit = host.vars.checkload.crit
vars.warn = host.vars.checkload.warn
check_command = "ssh-check-2arg"
assign where host.vars.sshcheck == "1"
vars.group = "perf"
}

#RHV
apply Service "ssh-self-checkvms" {
import "generic-service"
check_command = "ssh-getvms"
vars.host = host.address
vars.group = "virt"
assign where host.vars.hyp == "1" #check if the linux is actually a rhev hypervisor
}
##Real RHEV RHV
#apply Service "ssh-self-checklun" {
#  import "generic-service-notify"
#  vars.stor = "SG_Y01_001FL"
#  vars.engine = host.address
#  vars.crit = host.vars.checklun.crit
#  vars.warn = host.vars.checklun.warn
#  check_command = "ssh-checklun"
#  assign where host.vars.engine == "1"
#}

apply Service for (lun => config in host.vars.luns) {
  import "generic-service-slow"
  check_command = "ssh-checklun"
  vars += config
}

#Selfmade
apply Service "ssh-self-checkmem" {
  import "generic-service-notify"
  vars.check = "check_mem"
  vars.host = host.address
  vars.crit = host.vars.checkmem.crit
  vars.warn = host.vars.checkmem.warn
  check_command = "check_mem"
  vars.group = "perf"
  assign where host.vars.sshcheck == "1"
}

apply Service "ssh-self-checknet" { #uses sar (sysstat)
import "generic-service-f"
check_command = "ssh-checknet"
vars.host = host.address
vars.group = "net"
vars.warn = host.vars.checknet.warn #this is in kB/sec, if ANY of the interfaced superseed it: transmit and receive are seperate!!
vars.crit = host.vars.checknet.crit #so this is actually a gigabyte per sec
assign where host.vars.sshcheck == "1"
}

apply Service "ssh-self-netdata" { #uses ifconfig, searches for bond0
import "generic-service-notify"
check_command = "ssh-netdata"
vars.host = host.address
vars.group = "net"
assign where host.vars.sshcheck == "1" && !(host.vars.engine == "1")
}

apply Service "ssh-self-netdata-vm" { #uses ifconfig, searches for eth0
import "generic-service-notify"
check_command = "ssh-netdata-vm"
vars.host = host.address
vars.group = "net"
assign where host.vars.sshcheck == "1" && host.vars.engine == "1"
}

apply Service "ssh-self-cpu" { #uses sar
import "generic-service-notify"
check_command = "ssh-cpu"
vars.host = host.address
vars.group = "perf"
vars.warn = host.vars.checkcpu.warn
vars.crit = host.vars.checkcpu.crit
assign where host.vars.sshcheck == "1"
}

apply Service "ssh-self-vcpu" { #uses nproc
import "generic-service-veryslow"
check_command = "ssh-vcpu"
vars.host = host.address
vars.group = "perf"
assign where host.vars.sshcheck == "1"
}
